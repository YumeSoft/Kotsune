name: Android Release

permissions:
  contents: write # needed for creating releases and pushing tags

on:
  # Trigger on workflow_dispatch without version input
  workflow_dispatch:

  # Keep tag-based triggers for automated deployments
  push:
    tags:
      - 'v*'

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: gradle

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Extract version from build.gradle.kts
        id: get_version
        run: |
          # Extract versionName from build.gradle.kts using grep and sed
          VERSION=$(grep -o 'versionName = "[^"]*"' app/build.gradle.kts | sed 's/versionName = "//;s/"$//')
          echo "VERSION=${VERSION}" >> $GITHUB_OUTPUT
          # Extract versionCode for reference (optional)
          VERSION_CODE=$(grep -o 'versionCode = [0-9]*' app/build.gradle.kts | sed 's/versionCode = //')
          echo "VERSION_CODE=${VERSION_CODE}" >> $GITHUB_OUTPUT
          echo "Extracted version: ${VERSION} (code: ${VERSION_CODE})"

      - name: Auto-create or update tag if triggered manually
        if: github.event_name == 'workflow_dispatch'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          # Delete the tag locally if it exists
          git tag -d v${{ steps.get_version.outputs.VERSION }} 2>/dev/null || true
          # Create/recreate the tag
          git tag -a v${{ steps.get_version.outputs.VERSION }} -m "Release v${{ steps.get_version.outputs.VERSION }}"
          # Force push the tag to update it if it already exists
          git push --force "https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/YumeSoft/Kotsune.git" v${{ steps.get_version.outputs.VERSION }}

      - name: Increment versionCode in build.gradle
        run: |
          sed -i "s/versionCode = .*/versionCode = ${{ github.run_number }}/" app/build.gradle.kts

      - name: Setup build tool version variable
        shell: bash
        run: |
            BUILD_TOOL_VERSION=$(ls /usr/local/lib/android/sdk/build-tools/ | tail -n 1)
            echo "BUILD_TOOL_VERSION=$BUILD_TOOL_VERSION" >> $GITHUB_ENV
            echo Last build tool version is: $BUILD_TOOL_VERSION

      - name: Build Release APK
        run: ./gradlew assembleRelease

      - name: Sign APK
        uses: r0adkll/sign-android-release@v1
        id: sign_app
        with:
          releaseDirectory: app/build/outputs/apk/release
          signingKeyBase64: ${{ secrets.SIGNING_KEY }}
          alias: ${{ secrets.KEY_ALIAS }}
          keyStorePassword: ${{ secrets.KEY_STORE_PASSWORD }}
          keyPassword: ${{ secrets.KEY_PASSWORD }}
        env:
          BUILD_TOOLS_VERSION: ${{ env.BUILD_TOOL_VERSION }}

      # Add this step to rename the APK
      - name: Rename signed APK
        run: |
          mv ${{steps.sign_app.outputs.signedReleaseFile}} app/build/outputs/apk/release/app-release-signed.apk
          echo "SIGNED_APK=app/build/outputs/apk/release/app-release-signed.apk" >> $GITHUB_ENV

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          name: Release ${{ steps.get_version.outputs.VERSION }}
          tag_name: v${{ steps.get_version.outputs.VERSION }}
          draft: false
          prerelease: false
          files: ${{steps.sign_app.outputs.signedReleaseFile}}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}